import json
import os
import psycopg2
from psycopg2.extras import execute_values
from dotenv import load_dotenv
from datetime import datetime, timezone
import uuid

# Load environment variables from .env file in the server directory
dotenv_path = os.path.join(os.path.dirname(__file__), '..', '.env')
load_dotenv(dotenv_path)

DATABASE_URL = os.getenv('DATABASE_URL')

def generate_simple_modification_code():
    """Generates a simple 8-character uppercase alphanumeric modification code."""
    return uuid.uuid4().hex[:8].upper()

def seed_database():
    if not DATABASE_URL:
        print("Error: DATABASE_URL not found in environment variables.")
        return

    db_url_for_psycopg2 = DATABASE_URL
    if db_url_for_psycopg2 and "postgresql+psycopg2://" in db_url_for_psycopg2:
        # psycopg2.connect() expects a URI like postgresql://user:pass@host/dbname
        # The "postgresql+psycopg2://" scheme is often used by SQLAlchemy.
        db_url_for_psycopg2 = db_url_for_psycopg2.replace("postgresql+psycopg2://", "postgresql://")

    conn = None
    try:
        # Use the modified URL for the connection
        # Also, adjust the print statement to reflect the URL being used for connection attempt
        print(f"Connecting to database: {db_url_for_psycopg2.split('@')[-1] if '@' in db_url_for_psycopg2 else db_url_for_psycopg2}")
        conn = psycopg2.connect(db_url_for_psycopg2)
        cur = conn.cursor()
        print("Successfully connected to the database.")

        json_file_path = os.path.join(os.path.dirname(__file__), 'seed_db.json')
        if not os.path.exists(json_file_path):
            print(f"Error: Seed data file not found at {json_file_path}")
            return

        with open(json_file_path, 'r', encoding='utf-8') as f:
            jobs_data = json.load(f)
        
        print(f"Loaded {len(jobs_data)} job entries from seed_db.json")

        jobs_to_insert = []
        for job_entry in jobs_data:
            # ID will be generated by the script if not present in JSON
            job_id = job_entry.get('id', str(uuid.uuid4()))
            
            title = job_entry.get('title')
            company_name = job_entry.get('company_name')
            location = job_entry.get('location')
            description = job_entry.get('description')
            job_type = job_entry.get('job_type')
            application_info = job_entry.get('application_info')
            
            salary_min = job_entry.get('salary_min')
            salary_max = job_entry.get('salary_max')
            salary_currency = job_entry.get('salary_currency')
            
            tags = job_entry.get('tags', []) 
            
            poster_username_json = job_entry.get('poster_username')
            poster_username = poster_username_json.strip() if poster_username_json and poster_username_json.strip() else 'SeedUser'
            
            # Modification code will be generated by the script if not present in JSON
            modification_code = job_entry.get('modification_code', generate_simple_modification_code())
            if len(modification_code) != 8: # Basic validation if provided
                print(f"Warning: Provided modification_code for job '{title}' is not 8 characters. Generating a new one.")
                modification_code = generate_simple_modification_code()

            created_at_str = job_entry.get('created_at')
            updated_at_str = job_entry.get('updated_at')

            try:
                created_at = datetime.fromisoformat(created_at_str.replace('Z', '+00:00')) if created_at_str else datetime.now(timezone.utc)
                if created_at.tzinfo is None: created_at = created_at.replace(tzinfo=timezone.utc)
                
                updated_at = datetime.fromisoformat(updated_at_str.replace('Z', '+00:00')) if updated_at_str else datetime.now(timezone.utc)
                if updated_at.tzinfo is None: updated_at = updated_at.replace(tzinfo=timezone.utc)
            except (ValueError, AttributeError) as e:
                print(f"Warning: Invalid timestamp for job '{title}'. Error: {e}. Using current UTC time.")
                created_at = datetime.now(timezone.utc)
                updated_at = datetime.now(timezone.utc)

            if not all([title, company_name, description, application_info, poster_username, modification_code]):
                missing_fields = [
                    f for f, v in {
                        "title": title, "company_name": company_name, 
                        "description": description, "application_info": application_info,
                        "poster_username": poster_username, "modification_code": modification_code
                    }.items() if not v
                ]
                print(f"Skipping job (ID: {job_id}, Title: '{title}') due to missing essential fields: {', '.join(missing_fields)}")
                continue

            jobs_to_insert.append((
                job_id, title, company_name, location, description, job_type,
                application_info, salary_min, salary_max, salary_currency,
                tags, poster_username, modification_code, created_at, updated_at
            ))

        if not jobs_to_insert:
            print("No valid jobs to insert.")
            return

        insert_query = """
            INSERT INTO jobs (
                id, title, company_name, location, description, job_type,
                application_info, salary_min, salary_max, salary_currency,
                tags, poster_username, modification_code, created_at, updated_at
            ) VALUES %s
            ON CONFLICT (id) DO UPDATE SET 
                title = EXCLUDED.title,
                company_name = EXCLUDED.company_name,
                location = EXCLUDED.location,
                description = EXCLUDED.description,
                job_type = EXCLUDED.job_type,
                application_info = EXCLUDED.application_info,
                salary_min = EXCLUDED.salary_min,
                salary_max = EXCLUDED.salary_max,
                salary_currency = EXCLUDED.salary_currency,
                tags = EXCLUDED.tags,
                poster_username = EXCLUDED.poster_username,
                updated_at = EXCLUDED.updated_at;
        """
        execute_values(cur, insert_query, jobs_to_insert, page_size=100)
        conn.commit()
        
        print(f"Successfully processed {len(jobs_to_insert)} job entries.")

    except psycopg2.Error as e:
        print(f"Database error: {e}")
        if conn:
            conn.rollback()
    except FileNotFoundError:
        print(f"Error: Seed data file not found at {json_file_path}")
    except json.JSONDecodeError:
        print(f"Error: Could not decode JSON from {json_file_path}")
    except Exception as e:
        print(f"An unexpected error occurred: {e}")
    finally:
        if conn:
            cur.close()
            conn.close()
            print("Database connection closed.")

if __name__ == "__main__":
    seed_database()
